(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{231:function(e,t,a){"use strict";a.r(t);var n=a(2),s=Object(n.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"docker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker","aria-hidden":"true"}},[e._v("#")]),e._v(" Docker")]),e._v(" "),a("p",[e._v("Docker is used to run apps/processes without actually installing them. This is useful because it ensures the same environment is running on all the machines using the images that make the containers.")]),e._v(" "),a("p",[a("strong",[e._v("Container")]),e._v(" is a running instance of an "),a("strong",[e._v("image")]),e._v(", which is a template for an environment, a snapshot of a system at a certain time. It has the OS, software and application code all bundled in one file. Images are built via a "),a("strong",[e._v("Dockerfile")]),e._v(", a list of steps to perform to build the image. List of steps like configure the OS, install packages, copy project files into the right places...")]),e._v(" "),a("p",[e._v("Dockerfile > (build) Image > (run) Container.")]),e._v(" "),a("p",[e._v("There should be "),a("strong",[e._v("only one")]),e._v(" process per container.")]),e._v(" "),a("p",[e._v("Localhost (127.0.0.1) for a container is itself. Containers can access each other by using their names as the domain.")]),e._v(" "),a("p",[e._v("Docker uses a "),a("code",[e._v("unix socket")]),e._v(" which means that it runs as "),a("code",[e._v("root")]),e._v(" and asks for "),a("code",[e._v("sudo")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"installing-docker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#installing-docker","aria-hidden":"true"}},[e._v("#")]),e._v(" Installing Docker")]),e._v(" "),a("p",[e._v("Add the GPG key."),a("br"),e._v(" "),a("code",[e._v("curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -")])]),e._v(" "),a("p",[e._v("Add the Docker repository to APT sources."),a("br"),e._v(" "),a("code",[e._v('sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"')])]),e._v(" "),a("p",[e._v("Update the package list to include Docker."),a("br"),e._v(" "),a("code",[e._v("sudo apt-get update")])]),e._v(" "),a("p",[e._v("Install Docker."),a("br"),e._v(" "),a("code",[e._v("sudo apt-get install -y docker-ce")])]),e._v(" "),a("h2",{attrs:{id:"basic-commands"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#basic-commands","aria-hidden":"true"}},[e._v("#")]),e._v(" Basic Commands")]),e._v(" "),a("p",[a("code",[e._v("docker run <FLAGS> <IMAGE>")]),e._v(" - Build a container from an image and run it. Each usage creates a new container."),a("br"),e._v(" "),a("code",[e._v("docker start <NAME/ID>")]),e._v(" - Start an existing container by name or id."),a("br"),e._v(" "),a("code",[e._v("docker stop <NAME/ID>")]),e._v(" - Stop a container by name or id."),a("br"),e._v(" "),a("code",[e._v("docker ps")]),e._v(" - List all running containers. "),a("code",[e._v("-a")]),e._v(" for stopped ones."),a("br"),e._v(" "),a("code",[e._v("docker rm <NAME/ID>")]),e._v(" - Delete a container by name or id."),a("br"),e._v(" "),a("code",[e._v("docker exec -it <CONTAINER> bash")]),e._v(" - Enter a container.")]),e._v(" "),a("h2",{attrs:{id:"flags"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flags","aria-hidden":"true"}},[e._v("#")]),e._v(" Flags")]),e._v(" "),a("p",[a("code",[e._v("--name <NAME>")]),e._v(" - Name the container."),a("br"),e._v(" "),a("code",[e._v("-p 8080:80")]),e._v(" - Map the container's "),a("code",[e._v("80")]),e._v(" port, to the webserver's "),a("code",[e._v("8080")]),e._v(" port i.e. the container can be accessed via "),a("code",[e._v("8080")]),e._v("."),a("br"),e._v(" "),a("code",[e._v("-d")]),e._v(" - Run as daemon i.e. background process."),a("br"),e._v(" "),a("code",[e._v("-v <SOURCE>:<DESTINATION>")]),e._v(" - Volume. Mount a local directory as a container directory. Used when not specified in Dockerfile.")]),e._v(" "),a("p",[a("code",[e._v("sudo docker rm $(sudo docker ps -aq)")]),e._v(" - Remove all containers.")]),e._v(" "),a("h2",{attrs:{id:"build-container-with-dockerfile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#build-container-with-dockerfile","aria-hidden":"true"}},[e._v("#")]),e._v(" Build Container with Dockerfile")]),e._v(" "),a("h4",{attrs:{id:"dockerfile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile","aria-hidden":"true"}},[e._v("#")]),e._v(" Dockerfile")]),e._v(" "),a("p",[a("code",[e._v("FROM <IMAGE>")]),e._v(" - Always at top. Uses an image as a base."),a("br"),e._v(" "),a("code",[e._v("RUN <COMMAND>")]),e._v(" - Run commands on image "),a("strong",[e._v("build")]),e._v(". Can be chained with &&."),a("br"),e._v(" "),a("code",[e._v('CMD ["<COMMAND", "<ARGS>">]')]),e._v(" - Run a command on container "),a("strong",[e._v("start")]),e._v("."),a("br"),e._v(" "),a("code",[e._v("COPY <SOURCE> <DESTINATION>")]),e._v(" - Copy from local directory to container directory."),a("br"),e._v(" "),a("code",[e._v("WORKDIR <PATH>")]),e._v(" - Set work directory. Default is "),a("code",[e._v("/")]),e._v("."),a("br"),e._v(" "),a("code",[e._v("EXPOSE <PORT>")]),e._v(" - Expose a specific port."),a("br"),e._v(" "),a("code",[e._v("#")]),e._v(" - Comment.")]),e._v(" "),a("h4",{attrs:{id:"build"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#build","aria-hidden":"true"}},[e._v("#")]),e._v(" Build")]),e._v(" "),a("p",[a("code",[e._v("docker build -t <NAME> <SOURCE>")]),e._v(" - Build an image by running all commands in the Dockerfile.")]),e._v(" "),a("h6",{attrs:{id:"nginx-container-example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-container-example","aria-hidden":"true"}},[e._v("#")]),e._v(" nginx Container Example")]),e._v(" "),a("div",{staticClass:"language-Dockerfile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("FROM nginx\nCOPY ./nginx.conf /etc/nginx/conf.d/default.conf\nCOPY /src /www\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("# ./nginx.conf - Bare minimum needed to run nginx.\nserver {\n    root /www;\n}\n")])])]),a("p",[a("code",[e._v("sudo docker build -t nginx-static .")]),e._v(" - Build the container.")]),e._v(" "),a("p",[a("code",[e._v("sudo docker run -d -p 8080:80 --name nginx-static nginx-static")]),e._v(" - For this to work, a port forwarding rule is needed on the VM with host "),a("code",[e._v("3000")]),e._v(" and guest "),a("code",[e._v("8080")]),e._v(". Container "),a("code",[e._v("80")]),e._v(" > VM "),a("code",[e._v("8080")]),e._v(" > Host "),a("code",[e._v("3000")]),e._v(".")]),e._v(" "),a("p",[e._v("Visit the website in the host via "),a("code",[e._v("127.0.0.1:3000")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"docker-compose"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose","aria-hidden":"true"}},[e._v("#")]),e._v(" Docker Compose")]),e._v(" "),a("p",[a("code",[e._v("sudo apt-get install docker-compose")]),e._v(" or get it from https://github.com/docker/compose/releases.")]),e._v(" "),a("p",[e._v("After a while, running, starting and stopping containers gets very tedious. Instead of manually typing the docker commands one by one, we can define a "),a("code",[e._v("docker-compose.yml")]),e._v(" configuration file to do it for us.")]),e._v(" "),a("p",[e._v("We can either use pre-made Dockerfiles, or we can write their content directly in the compose file.")]),e._v(" "),a("p",[e._v("All the locations are relative to the docker-compose file.")]),e._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'3'")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Version of compose file format.")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("services")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("products-service")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This can be named anyway. Used for connecting containers.")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("build")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" ./products "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Folder containing Dockerfile.")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("volumes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# List of volumes to be mounted.")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" ./products"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("/usr/src/app "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Source:Container")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# List of ports.")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" 5001"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("80 ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Host:Container port forwarding.")]),e._v("\n")])])]),a("p",[a("code",[e._v("sudo docker-compose build")]),e._v(" - Recreate image."),a("br"),e._v(" "),a("code",[e._v("--no-cache")]),e._v(" - Recreate without cache.")]),e._v(" "),a("p",[a("code",[e._v("sudo docker-compose up")]),e._v(" - Run container."),a("br"),e._v(" "),a("code",[e._v("sudo docker-compose dowm")]),e._v(" - Stop and remove container.")]),e._v(" "),a("h4",{attrs:{id:"container-networking"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#container-networking","aria-hidden":"true"}},[e._v("#")]),e._v(" Container Networking")]),e._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"3"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("services")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("web")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("build")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" .\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"8000:8000"')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("db")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" postgres\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"8001:5432"')]),e._v("\n")])])]),a("p",[e._v("When you run docker-compose up, the following happens:")]),e._v(" "),a("ul",[a("li",[e._v("A network called "),a("code",[e._v("myapp_default")]),e._v(" is created.")]),e._v(" "),a("li",[e._v("A container is created using web’s configuration. It joins the network "),a("code",[e._v("myapp_default")]),e._v(" under the name "),a("code",[e._v("web")]),e._v(".")]),e._v(" "),a("li",[e._v("A container is created using db’s configuration. It joins the network "),a("code",[e._v("myapp_default")]),e._v(" under the name "),a("code",[e._v("db")]),e._v(".")])]),e._v(" "),a("p",[e._v("Each container can now look up the hostname web or db and get back the appropriate container’s IP address. For example, web’s application code could connect to the URL postgres://db:5432 and start using the Postgres database.")]),e._v(" "),a("p",[e._v("It is important to note the distinction between HOST_PORT and CONTAINER_PORT. In the above example, for db, the HOST_PORT is 8001 and the container port is 5432 (postgres default). Networked service-to-service communication use the CONTAINER_PORT. When HOST_PORT is defined, the service is accessible outside the swarm as well.")]),e._v(" "),a("p",[e._v("Within the web container, your connection string to db would look like postgres://db:5432, and from the host machine, the connection string would look like postgres://{DOCKER_IP}:8001.")])])},[],!1,null,null,null);t.default=s.exports}}]);